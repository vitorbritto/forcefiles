#!/bin/bash

#
# Functions
# ---------------------------------------------------


# General
# -------------------

# Create a data URI from a file
datauri() {
    local mimeType=""

    if [ -f "$1" ]; then
        mimeType=$(file -b --mime-type "$1")
        #                └─ do not prepend the filename to the output

        if [[ $mimeType == text/* ]]; then
            mimeType="$mimeType;charset=utf-8"
        fi

        printf "data:%s;base64,%s" \
                    "$mimeType" \
                    "$(openssl base64 -in "$1" | tr -d "\n")" > "$1".txt
    else
        echo "'$1' is not a file."
    fi
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
targz() {
    local tmpFile="${@%/}.tar"
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    )

    local cmd=""
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli"
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz"
        else
            cmd="gzip"
        fi
    fi

    echo "Compressing .tar using \`${cmd}\`…"
    "${cmd}" -v "${tmpFile}" || return 1
    [ -f "${tmpFile}" ] && rm "${tmpFile}"
    echo "${tmpFile}.gz created successfully."
}

# Delete all files that match a certain pattern from the current directory
rmf() {
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
}

# Remove directories
rmd() {
    rm -rf "$@"
}

# Create new directories and enter the first one
mkd() {
    if [ -n "$*" ]; then
        mkdir -p "$@" && cd "$@"
        #      └─ make parent directories if needed
    fi
}

# Search History
qh() {
    #                                 ┌─ enable colors for pipe
    #                                 │  ("--color=auto" enables colors only if
    #                                 │  the output is in the terminal)
    cat ~/.bash_history | grep --color=always "$*" | less -RX
    # display the ANSI color escape sequences in raw form ─┘│
    #           don't clear the screen after quitting less ─┘
}

# Search for text within the current directory
qt() {
    grep -ir --color=always "$*" . | less -RX
    #     │└─ search all files under each directory, recursively
    #     └─ ignore case
}

# Find directory
fdir() {
    find / -type d -name "$1" -print
}

# Copy to clipboard
cpd() {
  pwd | tr -d "\r\n" | pbcopy
}

cpf() {
  [[ "$#" != 1 ]] && return 1
  local file_to_copy=$1
  cat $file_to_copy | pbcopy
}

# `tr` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the .git, node_modules and bower_components directory, listing directories
# first. The output gets piped into `less` with options to preserve color and
# line numbers, unless the output is small enough for one screen.
tre() {
    tree -aC -I '.git|node_modules|bower_components|components|.sass-cache|.DS_Store' --dirsfirst "$@" | less -FRNX
}


# Development
# -------------------

# Shortcut to Projects
code() {
    # local path="$HOME/Sites/${1}"
    if [[ $2 == "--wp" ]]; then
        cd $HOME/Sites/"$1"/wp-content/themes/default
    else
        cd $HOME/Sites/"$1"
    fi
}

# Shortcut to Respositories
repo() {
    cd $HOME/Dropbox/Github/"$1"
}

# Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage: `gt browser-sync browserify contrib-watch contrib-uglify contrib-jshint  load-grunt-tasks time-grunt`
gt() {
    npm install -D load-grunt-tasks time-grunt ${*/#/grunt-}
}

# Install Gulp plugins and add them as `devDependencies` to `package.json`
# Usage: `gp browser-sync uglify jshint`
gp() {
    npm install -D ${*/#/gulp-}
}

# Clones a personal repository, cds into it, asks for install node modules and create executable script.
# - arg 1 - name of repository
clone() {
    local repo=$1
    local npm=$2
    local scr=$3

    # Install Node Modules
    if [[ -f package.json ]]; then
        npm=npm install
    fi

    # Make a script executable
    if [[ -f $repo.sh ]]; then
        src=chmod u+x $repo.sh
    elif [[ -f $repo.js ]]; then
        src=chmod u+x $repo.js
    fi

    # Initialize Clone
    git clone git://github.com/vitorbritto/$repo.git && cd $repo && $npm && $src;

    # All done!
    echo -n "✔ done!"
}

# Making a script executable
src() {
    chmod u+x "$@" && ./"$@"
}

# Grant Permission
grant() {
    chmod -R a+w ~/Sites/"$1"
}

godmode() {
    # WARNING:
    # This is a bad practice, but hopefully you are just using
    # this for development, or you have another good reason. =]
    # Before using either of these, really consider to run "chm function" right bellow.
    chmod -R 777 "$1"
}

chm() {
    if [ -f "$1" ]; then
        chmod -R 644 "$1"
    else
        chmod -R 755 "$1"
    fi
}

# Start a new project
boilerplate() {
    printf "→ Setting up your new project\n"
    git clone git://github.com/vitorbritto/boilerplates.git $1
    cd $1

    printf "→ Installing dependencies\n"
    npm install && clear

    printf "\n→ Initializing...\n"
    chmod u+x newproject.js
    ./newproject.js
}

# Kick Off Boilerplate
skeleton() {
    printf "→ Setting up the Boilerplate\n"
    git clone git://github.com/vitorbritto/skeleton.git $1
    cd $1 && clear

    printf "\n→ Initializing...\n"
    chmod u+x init.sh
    ./init.sh
}

# Template for Labs and Playground
play() {
    printf "→ Setting up your new playground\n"
    mkdir $1 && cd $_
    touch style.css app.js index.html
    printf "\n→ Initializing...\n"
    initws

}


# Server
# -------------------

ws() {
    local IP=$(ipconfig getifaddr en1)
    local PORT=$1
    echo "HINT: Press CTRL+C to stop webserver"
    sleep 1 && open "http://${IP}:${PORT}/"
    php -S "${IP}:${PORT}"
}

# MySQL
sqlio() {
    local DB_PATH="/Downloads"
    local DB_HOST="localhost"
    local DB_USER="root"
    local DB_NAME="$2"

    # Import
    if [[ "${1}" == "-i" || "${1}" == "--import" ]]; then
        tar zxf "$DB_NAME.tar.gz"
        mysql -h "$DB_HOST" -u "$DB_USER" -p "$DB_NAME" < "$DB_PATH/$DB_NAME.sql"
    fi

    # Export
    if [[ "${1}" == "-e" || "${1}" == "--export" ]]; then
        mysqldump -u "$DB_USER" -p "$DB_NAME" > "$DB_PATH/$DB_NAME.sql"
        tar zcf "$DB_NAME.tar.gz" "$DB_NAME.sql"
    fi
}
