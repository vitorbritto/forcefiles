#!/bin/bash

# ------------------------------------------------------------------------------
# | Database Settings                                                           |
# ------------------------------------------------------------------------------


# MySQL
# ---------------------

run_mysql() {

    e_header "Installing MySQL"

    brew install -v mysql

    e_header "Setting up MySQL"

    # Copy the default my-default.cnf file to the MySQL Homebrew Cellar
    # directory where it will be loaded on application start:
    cp -v $(brew --prefix mysql)/support-files/my-default.cnf $(brew --prefix)/etc/my.cnf

    # This will configure MySQL to allow for the maximum packet size,
    # only appropriate for a local or development server.
    cat >> $(brew --prefix)/etc/my.cnf <<'EOF'

# Vitor Britto - Changes
max_allowed_packet = 1073741824
innodb_file_per_table = 1
EOF

    # Uncomment the sample option for innodb_buffer_pool_size to improve performance:
    sed -i '' 's/^#[[:space:]]*\(innodb_buffer_pool_size\)/\1/' $(brew --prefix)/etc/my.cnf

    # Now we need to start MySQL using OS X's launchd, and we'll set it to start when you login.
    [[ ! -d ~/Library/LaunchAgents ]] && mkdir -v ~/Library/LaunchAgents
    ln -sfv $(brew --prefix mysql)/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/
    launchctl load -Fw ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist

    # By default, MySQL's root user has an empty password from any connection.
    # You are advised to run mysql_secure_installation and at least set a password for the root user:
    $(brew --prefix mysql)/bin/mysql_secure_installation

    e_success "MySQL successfully installed!"

}


# PostgreSQL
# ---------------------

run_postgresql() {

    e_header "Installing PostgreSQL"

    brew install -v postgresql

    e_header "Setting up PostgreSQL"

    # Now we need to start PostgreSQL using OS X's launchd, and we'll set it to start when you login.
    [[ ! -d ~/Library/LaunchAgents ]] && mkdir -v ~/Library/LaunchAgents
    ln -sfv $(brew --prefix postgresql)/homebrew.mxcl.postgresql.plist ~/Library/LaunchAgents/
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist

    e_success "PostgreSQL successfully installed!"

}


# MongoDB
# ---------------------

run_mongodb() {

    e_header "Installing MongoDB"
    brew install -v mongodb

    e_header "Setting up MongoDB"

    # Now we need to start MongoDB using OS X's launchd, and we'll set it to start when you login.
    [[ ! -d ~/Library/LaunchAgents ]] && mkdir -v ~/Library/LaunchAgents
    ln -sfv $(brew --prefix mongodb)/homebrew.mxcl.mongodb.plist ~/Library/LaunchAgents/
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist

    e_success "MongoDB successfully installed!"

}


# CouchDB
# ---------------------

run_couchdb() {

    e_header "Installing CouchDB"
    brew install -v couchdb

    e_header "Setting up CouchDB"

    # Now we need to start CouchDB using OS X's launchd, and we'll set it to start when you login.
    [[ ! -d ~/Library/LaunchAgents ]] && mkdir -v ~/Library/LaunchAgents
    ln -sfv $(brew --prefix couchdb)/homebrew.mxcl.couchdb.plist ~/Library/LaunchAgents/
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.couchdb.plist

    e_success "CouchDB successfully installed!"

}


# SQLite
# ---------------------

run_sqlite() {

    e_header "Installing SQLite"
    brew install -v sqlite

    e_header "Setting up SQLite"

    # Now we need to start SQLite using OS X's launchd, and we'll set it to start when you login.
    [[ ! -d ~/Library/LaunchAgents ]] && mkdir -v ~/Library/LaunchAgents
    ln -sfv $(brew --prefix sqlite)/homebrew.mxcl.sqlite.plist ~/Library/LaunchAgents/
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.sqlite.plist

    e_success "SQLite successfully installed!"

}


        
