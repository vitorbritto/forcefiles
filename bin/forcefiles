#!/bin/bash

# ------------------------------------------------------------------------------
# | UI                                                                         |
# ------------------------------------------------------------------------------

# Header logging
e_header() {
    printf "$(tput setaf 38)→ %s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
    printf "$(tput setaf 76)✔ %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
    printf "$(tput setaf 1)✖ %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
    printf "$(tput setaf 3)! %s$(tput sgr0)\n" "$@"
}

# Ask for confirmation before proceeding
seek_confirmation() {
    printf "\n"
    e_warning "$@"
    read -p "Continue? (y/n) " -n 1
    printf "\n"
}

# Test whether the result of an 'ask' is a confirmation
is_confirmed() {
    if [[ "$REPLY" =~ ^[Yy]$ ]]; then
      return 0
    fi
    return 1
}

# Test whether we're in a git repo
is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
    if [ $(type -P $1) ]; then
      return 0
    fi
    return 1
}

# Test whether a directory exists
# $1 - cmd to test
dir_exists() {
    if [ $(-d $1) ]; then
      return 0
    fi
    return 1
}

# Test whether a Homebrew formula is already installed
# $1 - formula name (may include options)
formula_exists() {
    if $(brew list $1 > /dev/null); then
        printf "%s already installed.\n" "$1"
        return 0
    fi

    e_warning "Missing formula: $1"
    return 1
}



# ------------------------------------------------------------------------------
# | Help                                                                       |
# ------------------------------------------------------------------------------

run_help() {

cat <<EOT

------------------------------------------------------------------------------
OS X dotfiles - Vitor Britto - http://www.vitorbritto.com.br
------------------------------------------------------------------------------

Usage: $(basename "$0") [options]

Options:
    -h, --help      output help
    --no-packages   suppress package updates
    --no-sync       suppress pulling from the remote repository

Documentation can be found at https://github.com/vitorbritto/forcefiles/

Copyright (c) Vitor Britto
Licensed under the MIT license.

------------------------------------------------------------------------------

EOT

}


# ------------------------------------------------------------------------------
# | Script                                                                     |
# ------------------------------------------------------------------------------

FORCEFILES_DIRECTORY="${HOME}/.forcefiles"
FORCEFILES_TARBALL_PATH="https://github.com/vitorbritto/forcefiles/tarball/master"
FORCEFILES_GIT_REMOTE="https://github.com/vitorbritto/forcefiles"

# Clear console
clear

# Ask for the administrator password upfront (using without alias)
sudo -v

# If missing, download and extract the forcefiles repository
if [[ ! -d ${FORCEFILES_DIRECTORY} ]]; then
    e_header "Downloading forcefiles"
    mkdir ${FORCEFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/forcefiles.tar.gz ${FORCEFILES_TARBALL_PATH}
    # Extract to the forcefiles directory
    tar -zxf ${HOME}/forcefiles.tar.gz --strip-components 1 -C ${FORCEFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/forcefiles.tar.gz
fi

cd ${FORCEFILES_DIRECTORY}

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  Download them from: https://developer.apple.com/downloads\n"
    printf "  Then run: bash ~/.forcefiles/bin/forcefiles\n"
    exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# Check for Setuptools
if ! type_exists 'easy_install'; then
    e_header "Installing Setuptools"
    curl https://bootstrap.pypa.io/ez_setup.py -o - | python
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew"
    brew update
    e_header "Installing Git"
    brew install git
fi

# Check for rvm
if ! type_exists 'rvm'; then
    e_header "Installing Rvm"
    curl -L https://get.rvm.io | bash -s stable
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository"
    git init
    git remote add origin ${FORCEFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    e_header "Skipped forcefiles sync.\n"
else
    e_header "Syncing forcefiles"
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
fi

setup_workspace() {
    
    # -------------------------------------------------------
    # Homebrew
    # -------------------------------------------------------
    if type_exists "brew"; then
        e_header "Updating Homebrew"
        brew update
        e_success "Done!"
        e_header "Updating any existing Homebrew formulae"
        brew upgrade
        e_success "Done"
        e_header "Installing Homebrew formulae"
        brew install erlang nvm watchman
        brew tap wix/brew
        brew install --HEAD applesimutils
        e_success "Homebrew formulaes successfully installed!"
    else
        printf "\n"
        e_error "You must install Homebrew first"
        printf "Stopping...\n"
        exit
    fi
    
    # -------------------------------------------------------
    # Yarn
    # -------------------------------------------------------
    e_header "Installing Yarn"
    curl -o- -L https://yarnpkg.com/install.sh | bash
    
    # -------------------------------------------------------
    # NVM
    # -------------------------------------------------------
    e_header "Installing NVM"
    git clone https://github.com/nvm-sh/nvm.git .nvm
    cd $HOME/nvm
    git checkout v0.34.0
    . nvm.sh
    nvm install v10.4.1
    nvm use 10.4.1
    nvm alias default 10.4.1


    # -------------------------------------------------------
    # Gems
    # -------------------------------------------------------
    e_header "Installing Gems"
    sudo gem install -n /usr/local/bin sass bundler xcodeproj cocoapods
    e_success "Gems successfully installed!"

    # -------------------------------------------------------
    # Mobile
    # -------------------------------------------------------
    e_header "Setting up your Mobile Environment"
    e_warning "IMPORTANT: You need to accept the XCode License to procced..."

    seek_confirmation "Are you accept the Xcode License already?"
    
    if is_confirmed; then
        xcodebuild -license
    fi

    xcode-select --install
    sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
    
    e_header "Setting up CocoaPods Master Repository"
    mkdir -p ~/.cocoapods/repos && cd ~/.cocoapods/repos && git clone https://github.com/CocoaPods/Specs.git master
    
    e_header "Installing Formulaes"
    brew install xcproj android-sdk ideviceinstaller ios-webkit-debug-proxy
    
    e_info "Remember to get Genymotion (https://www.genymotion.com/)"
    e_success "All done!"

    # -------------------------------------------------------
    # NPM
    # -------------------------------------------------------
    e_header "Installing Global Packages"
    local NPM_GLOBAL_PKGS='gulp-cli ios-sim ios-deploy reactotron-cli ignite-cli react-native-cli create-react-native-app create-react-app detox-cli typescript'
    npm i -g "$NPM_GLOBAL_PKGS"
    e_success "Global Packages successfully installed!"

    # Cleanup
    brew cleanup
}

link() {
    # Force create/replace the symlink.
    ln -fs "${FORCEFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

setup_bash() {
    
    # Remove Default files
    rm -rf .bash_profile .bash_history .bashrc .mkshrc .zlogin .zshrc .profile
    rm -rf .bash_sessions
    
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${FORCEFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

    # Create the necessary symbolic links between the `.forcefiles` and `HOME` directory.
    # The `bash_profile` sources other files directly from the `.forcefiles` repository.
    link "bash/bashrc"              ".bashrc"
    link "bash/bash_profile"        ".bash_profile"
    link "bash/inputrc"             ".inputrc"
    link "bash/screenrc"            ".screenrc"
    link "gem/gemrc"                ".gemrc"
    link "git/gitattributes"        ".gitattributes"
    link "git/gitignore"            ".gitignore"
    link "git/gitmodules"           ".gitmodules"
    link "npm/npmrc"                ".npmrc"

    e_success "Done!"
}

# Ask before potentially overwriting files
seek_confirmation "Would you like to setup your bash environment?"

if is_confirmed; then
    setup_bash
    source ${HOME}/.bash_profile
else
    e_error "Skipped Bash settings.\n"
    exit 1
fi

seek_confirmation "Would you like to setup your Workspace?"

if is_confirmed; then
    setup_workspace
else
    e_error "Skipped environment settings.\n"
    exit 1
fi

# OS X defaults
seek_confirmation "Would you like to modify your OS X system defaults?"

if is_confirmed; then
    bash ./bin/osxdefaults
    e_success "OS X settings updated!"
else
    e_error "Skipped OS X settings.\n"
fi
