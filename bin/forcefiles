#!/bin/bash

# Source Lib Files
source ./lib/utils
source ./lib/brew
source ./lib/nvm
source ./lib/npm
source ./lib/gems
source ./lib/mobile

FORCEFILES_DIRECTORY="${HOME}/.forcefiles"
FORCEFILES_TARBALL_PATH="https://github.com/vitorbritto/forcefiles/tarball/master"
FORCEFILES_GIT_REMOTE="https://github.com/vitorbritto/forcefiles"

# Clear console
clear

# Ask for the administrator password upfront (using without alias)
sudo -v

# If missing, download and extract the forcefiles repository
if [[ ! -d ${FORCEFILES_DIRECTORY} ]]; then
    e_header "Downloading forcefiles"
    mkdir ${FORCEFILES_DIRECTORY}
    # Get the tarball
    curl -fsSLo ${HOME}/forcefiles.tar.gz ${FORCEFILES_TARBALL_PATH}
    # Extract to the forcefiles directory
    tar -zxf ${HOME}/forcefiles.tar.gz --strip-components 1 -C ${FORCEFILES_DIRECTORY}
    # Remove the tarball
    rm -rf ${HOME}/forcefiles.tar.gz
fi

cd ${FORCEFILES_DIRECTORY}

# Help text
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    run_help
    exit
fi

# Test for known flags
for opt in $@
do
    case $opt in
        --no-sync) no_sync=true ;;
        -*|--*) e_warning "Warning: invalid option $opt" ;;
    esac
done

# Before relying on Homebrew, check that packages can be compiled
if ! type_exists 'gcc'; then
    e_error "The XCode Command Line Tools must be installed first."
    printf "  Download them from: https://developer.apple.com/downloads\n"
    printf "  Then run: bash ~/.forcefiles/bin/forcefiles\n"
    exit 1
fi

# Check for Homebrew
if ! type_exists 'brew'; then
    e_header "Installing Homebrew"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# Check for Setuptools
if ! type_exists 'easy_install'; then
    e_header "Installing Setuptools"
    curl https://bootstrap.pypa.io/ez_setup.py -o - | python
fi

# Check for git
if ! type_exists 'git'; then
    e_header "Updating Homebrew"
    brew update
    e_header "Installing Git"
    brew install git
fi

# Check for rvm
if ! type_exists 'rvm'; then
    e_header "Installing Rvm"
    curl -L https://get.rvm.io | bash -s stable
fi

# Initialize the git repository if it's missing
if ! is_git_repo; then
    e_header "Initializing git repository"
    git init
    git remote add origin ${FORCEFILES_GIT_REMOTE}
    git fetch origin master
    # Reset the index and working tree to the fetched HEAD
    # (submodules are cloned in the subsequent sync step)
    git reset --hard FETCH_HEAD
    # Remove any untracked files
    git clean -fd
fi

# Conditionally sync with the remote repository
if [[ $no_sync ]]; then
    e_header "Skipped forcefiles sync.\n"
else
    e_header "Syncing forcefiles"
    # Pull down the latest changes
    git pull --rebase origin master
    # Update submodules
    git submodule update --recursive --init --quiet
fi

bootstrap() {

    # Install Homebrew formulaes
    run_brew
    
    # Setup JavaScript Environment
    run_nvm
    run_npm

    # Install Ruby Environment
    run_gems
    
    # Setup Mobile Environment
    run_mobile

    # Remove outdated versions from the Cellar
    brew cleanup

}

link() {
    # Force create/replace the symlink.
    ln -fs "${FORCEFILES_DIRECTORY}/${1}" "${HOME}/${2}"
}

mirrorfiles() {
    
    # Remove Default files
    rm -rf .bash_profile .bash_history .bashrc .mkshrc .zlogin .zshrc .profile
    rm -rf .bash_sessions
    
    # Copy `.gitconfig`.
    # Any global git commands in `~/.bash_profile.local` will be written to
    # `.gitconfig`. This prevents them being committed to the repository.
    rsync -avz --quiet ${FORCEFILES_DIRECTORY}/git/gitconfig  ${HOME}/.gitconfig

    # Create the necessary symbolic links between the `.forcefiles` and `HOME` directory.
    # The `bash_profile` sources other files directly from the `.forcefiles` repository.
    link "bash/bashrc"              ".bashrc"
    link "bash/bash_profile"        ".bash_profile"
    link "bash/inputrc"             ".inputrc"
    link "bash/screenrc"            ".screenrc"
    link "gem/gemrc"                ".gemrc"
    link "git/gitattributes"        ".gitattributes"
    link "git/gitignore"            ".gitignore"
    link "git/gitmodules"           ".gitmodules"
    link "npm/npmrc"                ".npmrc"
    link "tmux/tmux.conf"           "tmux.conf"

    e_success "Done!"
}

# Ask before potentially overwriting files
seek_confirmation "Are you ready?"

if is_confirmed; then
    mirrorfiles
    bootstrap
    source ${HOME}/.bash_profile
else
    e_error "Sorry to see you go. :(\n"
    exit 1
fi

# Install Applications
seek_confirmation "Would you like to install your applications now?"

if is_confirmed; then
    run_apps
    e_success "Update complete!"
else
    e_error "Skipped!\n"
fi

# OS X defaults
seek_confirmation "Would you like to modify your OS X system defaults?"

if is_confirmed; then
    bash ./bin/osxdefaults
    e_success "OS X settings updated!"
else
    e_error "Skipped OS X settings.\n"
fi
